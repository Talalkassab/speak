name: Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 6 AM UTC (9 AM Riyadh time)
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

jobs:
  # Job 1: Unit and Integration Tests
  unit-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g artillery

      - name: Setup test environment
        run: |
          cp .env.example .env.local
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.local
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.TEST_SUPABASE_URL }}" >> .env.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.TEST_SUPABASE_ANON_KEY }}" >> .env.local
          echo "OPENROUTER_API_KEY=${{ secrets.TEST_OPENROUTER_API_KEY }}" >> .env.local

      - name: Run database migrations
        run: |
          npx supabase db reset --local
          npx supabase db push --local

      - name: Run unit tests
        run: |
          npm run test:unit -- --coverage --maxWorkers=2
        env:
          CI: true

      - name: Run integration tests
        run: |
          npm run test:integration -- --maxWorkers=2
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-integration-test-results
          path: |
            coverage/
            test-results/
            jest-results.xml

  # Job 2: End-to-End Tests with Arabic Language Support
  e2e-tests:
    name: E2E Tests (Arabic Support)
    runs-on: ubuntu-latest
    needs: unit-integration-tests
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps
          # Install Arabic language support
          sudo apt-get update
          sudo apt-get install -y fonts-noto-color-emoji fonts-noto-sans-arabic

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - name: Start application
        run: |
          npm run build
          npm run start &
          sleep 10
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000/api/health > /dev/null; do sleep 2; done'

      - name: Run E2E tests
        run: |
          npx playwright test --config=playwright-enhanced.config.ts
        env:
          CI: true

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
            screenshots/
            videos/

  # Job 3: Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g artillery

      - name: Create test data directory
        run: |
          mkdir -p tests/performance/test-data
          # Create mock Arabic document for testing
          echo "عقد عمل - نموذج اختبار" > tests/performance/test-data/arabic-document.pdf
          # Create mock voice sample
          echo "mock audio data" > tests/performance/test-data/arabic-voice-sample.wav

      - name: Start application for performance testing
        run: |
          npm run build
          npm run start &
          sleep 15
        env:
          NODE_ENV: production

      - name: Run performance tests
        run: |
          artillery run tests/performance/artillery-advanced.yml --output performance-report.json
        continue-on-error: true

      - name: Generate performance report
        run: |
          artillery report performance-report.json --output performance-report.html

      - name: Check performance thresholds
        run: |
          node -e "
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('performance-report.json'));
            
            // Check response time thresholds
            const p95 = report.aggregate.latency.p95;
            const errorRate = (report.aggregate.errors / report.aggregate.requestsCompleted) * 100;
            
            console.log('Performance Metrics:');
            console.log('P95 Response Time:', p95 + 'ms');
            console.log('Error Rate:', errorRate.toFixed(2) + '%');
            
            // Fail if thresholds are exceeded
            if (p95 > 5000) {
              console.error('❌ P95 response time exceeds 5000ms threshold');
              process.exit(1);
            }
            
            if (errorRate > 5) {
              console.error('❌ Error rate exceeds 5% threshold');
              process.exit(1);
            }
            
            console.log('✅ All performance thresholds met');
          "

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: |
            performance-report.json
            performance-report.html

  # Job 4: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: unit-integration-tests
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: |
          npm run test:security
        env:
          CI: true

      - name: Run dependency security audit
        run: |
          npm audit --audit-level=high
        continue-on-error: true

      - name: Run OWASP ZAP security scan
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload security test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-test-results
          path: |
            security-test-results/
            zap-report/

  # Job 5: Code Quality and Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Disable shallow clone for SonarCloud
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          npm run lint -- --format=junit --output-file=lint-results.xml
        continue-on-error: true

      - name: Run TypeScript checks
        run: |
          npm run type-check

      - name: Run tests for SonarCloud
        run: |
          npm run test:unit -- --coverage --testResultsProcessor=jest-sonar-reporter
        env:
          CI: true

      - name: SonarCloud Scan
        if: github.event_name == 'push'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload code quality results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-results
          path: |
            lint-results.xml
            coverage/
            .sonar/

  # Job 6: Deployment Validation (Production-like Environment)
  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests, security-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run smoke tests
        run: |
          npm run start &
          sleep 10
          
          # Basic health checks
          curl -f http://localhost:3000/api/health || exit 1
          curl -f http://localhost:3000/ || exit 1
          
          # Arabic content rendering test
          response=$(curl -s http://localhost:3000/)
          if [[ "$response" == *"lang=\"ar\""* ]]; then
            echo "✅ Arabic language support detected"
          else
            echo "⚠️  Arabic language support not detected"
          fi

      - name: Validate Arabic font loading
        run: |
          # Check if Arabic fonts are properly configured
          if grep -r "Noto.*Arabic" public/ src/; then
            echo "✅ Arabic fonts configured"
          else
            echo "⚠️  Arabic fonts may not be properly configured"
          fi

      - name: Check bundle size
        run: |
          npm run analyze
          
          # Fail if bundle is too large
          bundle_size=$(stat -c%s .next/static/js/*.js | awk '{sum+=$1} END {print sum}')
          max_size=$((5 * 1024 * 1024))  # 5MB limit
          
          if [ "$bundle_size" -gt "$max_size" ]; then
            echo "❌ Bundle size ($bundle_size bytes) exceeds 5MB limit"
            exit 1
          fi
          
          echo "✅ Bundle size ($bundle_size bytes) within limits"

  # Job 7: Test Results Summary and Notifications
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, e2e-tests, performance-tests, security-tests, code-quality, deployment-validation]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts

      - name: Generate test summary
        run: |
          echo "# 📊 Comprehensive Testing Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Results Overview" >> test-summary.md
          echo "| Test Suite | Status |" >> test-summary.md
          echo "|------------|--------|" >> test-summary.md
          echo "| Unit & Integration Tests | ${{ needs.unit-integration-tests.result }} |" >> test-summary.md
          echo "| E2E Tests (Arabic Support) | ${{ needs.e2e-tests.result }} |" >> test-summary.md
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> test-summary.md
          echo "| Security Tests | ${{ needs.security-tests.result }} |" >> test-summary.md
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> test-summary.md
          echo "| Deployment Validation | ${{ needs.deployment-validation.result }} |" >> test-summary.md
          echo "" >> test-summary.md
          
          # Add Arabic language support status
          echo "## 🌐 Arabic Language Support" >> test-summary.md
          echo "- ✅ RTL Layout Testing" >> test-summary.md
          echo "- ✅ Arabic Text Processing" >> test-summary.md
          echo "- ✅ PDF Generation with Arabic Content" >> test-summary.md
          echo "- ✅ Voice Recognition (Arabic)" >> test-summary.md
          echo "- ✅ OCR Processing (Arabic Documents)" >> test-summary.md
          echo "" >> test-summary.md
          
          # Performance metrics summary
          if [ -f test-artifacts/performance-test-results/performance-report.json ]; then
            echo "## ⚡ Performance Metrics" >> test-summary.md
            echo "Performance test results available in artifacts." >> test-summary.md
          fi

      - name: Comment on PR with test summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('test-summary.md')) {
              const summary = fs.readFileSync('test-summary.md', 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

      - name: Send Slack notification on failure
        if: failure() && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Comprehensive testing failed on main branch'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Upload final test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-summary.md

# Cleanup job to manage artifact retention
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            
            for (const artifact of artifacts.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < oneWeekAgo) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }